!--MODULE_1--!
Pettier вызывается ctrl или command-shift-p;
Слева от выражения может стоять только индетификатор;
Имя идентификатора может состоять из: A-Z a-z _ $ ;
Используем camelCase - первое слово в идентефикаторе с маленькой, последующие - с большой;
Комментарии: однострочные - //, многострочные /**/;
ВСЕГДА ставим ";" ;
let - объявляем переменную
Переменным, объявленным через const нельзя менять содержимое;
Объявляем переменные сверху вниз, компилтор ищет их значения снизу вверх;
По умолчанию везде объявляем переменные через const;
!Значение переменной имеет тип, а не сама переменная!;
Дробные числа пишутся через точку;
Строка в js - просто последовательность символов между '' или "";
name - даем имя 
true or false - флажки 
null - ничтоб, пустота (отмена ввода, к примеру);
typeof - возвращает тип строки: черный - строка, синий - число;
alert - вывод диалогового окна в браузере;
!Пока выполняется alert - всё остальное висит!
promt - вызывает строку, забирает с неё то что в неё ввели, чему, в свою очередь, можно присвоить переменную;
promt можно описать ('');
!promt всегда возвращает строку!;
При cancel promt выводит null;
!promt тоже вешает исполнение скрипта!;
confrim - флажек для false или true, используется для потверждения действия;
+ - * / % это операторы;
% - остаток от деления;
То, к чему используются операторы - операнды;
result - выводит решение;
При выражениях с <> result выводит true or false;
= - операция присваивания, == - операция сравнения, != - неравенство;
!НИКОГДА НЕ ИСПОЛЬЗУЕМ НЕСТРОГИЕ!
!Но мы ВСЕГДА используем СТРОГОЕ РАВЕНСТВО ===!;
Строгое равенство в отличии от нестрогого учитывает еще и типы данных а не только их значения;
Для того что бы преобразовать что-нибуть в строку - вызываем const #variable_name = String(true);
Если преобразовать в число - Number;
Если браузер не может преобразовать строку в число - Number выведет значение NaN(Not a Number);
!НИКОГДА не использовать для этого унарный плюс - + перед строкой!;
Если задать number true или false - он вернет, соответственно, 1 или 0;
parseInt - использовать если нужно переобразовать строку в число const #var_name = Number.parseInt(#string_name);
parseFloat - при дробных числах;
Если нам нужно (а нам нужно) проверить значение NaN - используем isNaN, пример:
const #var_name = Number.isNaN(#var_name)
!При сложении дробных чисел - получаются лишние дроби!
Во избежание этого сначала умножаем аргументы на 100, слаживаем их, потом результат снова делим на сто - ??? - PROFIT!;
Math - объект для работы с математикой;
use as Math.#function_name
Math.random - input random number
.max - choose the biggest number from the list
.round - rounding numbers
.floor and .ceil - rounding down and top respectively;
If put '+' plus between two strings we'll get one combined string, it's called CONCATENATION of strings;
example:
const message = 'Welcome!' + 'Mango';
console.log(message); 
-result 'Welcome!Mango'
whatever value any operand would have while concatenation is processed, if one of them is string - others also will be strings;
!Но если сначала поставить математическую функцию (10+10/10*10 и т.д.), то получим её результат, преобразованый в строку!;
Каждый символ в строке занимает свою собственную позицию, нумерация этих позиций называется индексацией и происходит следующим образом:
(0,1,2,3,4,5,6....);
.length - возвращает длинну строки (кол-во символов в ней);
.toUpperCase - возвращет строку с символами преобразованными в заглавные буквы;
.toLowerCase - преобразовывает в нижний регистр;
indexOf(idx) - возвращает номер, с которого начинается задаваемое значение подстроки, например:
const name = 'My name is Mango'
const idx = name.indexOf('is')
console.log('idx');
-result: 8 - номер, на котором стоит символ і;
.include - возвращает значение true false если строка включает в себя указанную подстроку или нет;
Для вызова шаблонной строки используем `;
Пример: `My name is ${name}, ${name} - подставляет значение переменной;
!ФОРМАТИРОВАТЬ док Pettier - SHIFT + ALT + F;
!Позже прочти 3 статьи в КОНЦЕ 1 МОДУЛЯ!;
--Вебинар-2--
В js все типы данных могут преобразовываться:
в false преобразуются - '' , "" , (пустые строки), NaN, 0, -0, null и undefined, всё остальное - true;
!Как можно меньше использовать строк, вместо них юзать массивы!;
Строки иммутабельны - они неперезаписываются и хранятся в браузере до закрытия программы;
Всё что попадает в if будет true или false.
Тип null - object - это официально признаная ошибка js.
.isIntenger - проверяет целое ли число. Целое - true.
Тернарный оператор:
let res = 10>100 ? 155 : 256 если true - 155, если false - 256;
Оператор switch используется для ветвления в случаях с многими возможными событиями. Синтаксис:
const monthName = "January";
let season;

switch (monthName) {
 case "June":          - в случае "#case_name"
    season = "summer"; - #var_name = #name_input
    break;             - означает окончание проверки кейсов и вывод конечного значения операции;
 case "May":
    season = "spring";
    break:
...
 default:             - любое значение, не соответствующее высшеперечисленным;
    season = "winter";
}

console.log(season);

СОКРАЩЕННЫЕ ОПЕРАТОРЫ: 
(x += y) == (x = x + y);
Логические операторы:
&& (и) - если хотя бы одно из значений - "false" - возвращает false, ВОЗВРАЩАЕТ ЛИБО ЛОЖНОЕ ЗНАЧЕНИЕ ЛИБО САМОЕ ПРАВОЕ;
!ПРИЧЕМ! Если во время поиска (и) нашел нужное значение - дальше он операцию не проводит!
|| (или) - если хотя бы одно из значений - "true" - возвращает true, ВОЗВРАЩАЕТ ПРАВДИВОЕ ЗНАЧЕНИЕ, ЛИБО САМОЕ ЛЕВОЕ,
!ПРИЧЕМ! Если во время поиска (или) нашел нужное значение - дальше он операцию не проводит!
!(нет) - возвращает значение обратное принятому;
